#!/bin/bash
set -e

DRY_RUN=false
ACTIONS=()
WARNINGS=()
ERRORS=()

# Renk kodlarƒ±
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Dry-run parametre kontrol√º
if [[ "$1" == "--dry-run" ]]; then
  DRY_RUN=true
  shift
  echo -e "${BLUE}=== DRY-RUN MODU AKTƒ∞F ===${NC}"
  echo "Sistem kontrol√º yapƒ±lacak, hi√ßbir deƒüi≈üiklik yapƒ±lmayacak"
  echo "------------------------------------------------------"
fi

# Yardƒ±mcƒ± fonksiyonlar
check_command() {
    if command -v "$1" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úì${NC} $1 mevcut"
        return 0
    else
        echo -e "${RED}‚úó${NC} $1 bulunamadƒ±"
        return 1
    fi
}

check_port() {
    if lsof -i :$1 >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†${NC} Port $1 zaten kullanƒ±mda"
        WARNINGS+=("Port $1 kullanƒ±mda - Redis √ßakƒ±≈ümasƒ± olabilir")
        return 1
    else
        echo -e "${GREEN}‚úì${NC} Port $1 m√ºsait"
        return 0
    fi
}

check_service() {
    if systemctl is-active --quiet "$1" 2>/dev/null; then
        echo -e "${YELLOW}‚ö†${NC} $1 servisi zaten √ßalƒ±≈üƒ±yor"
        WARNINGS+=("$1 servisi zaten aktif")
        return 1
    else
        echo -e "${GREEN}‚úì${NC} $1 servisi durumunda"
        return 0
    fi
}

simulate_ubuntu_install() {
    echo -e "\n${BLUE}=== Ubuntu Redis Kurulum Sim√ºlasyonu ===${NC}"
    
    # Sistem kontrolleri
    echo -e "\nüìã Sistem Kontrolleri:"
    check_command "apt-get" || ERRORS+=("apt-get komutu bulunamadƒ±")
    check_command "systemctl" || ERRORS+=("systemctl komutu bulunamadƒ±")
    
    # Redis kontrolleri
    echo -e "\nüîç Redis Durumu:"
    if check_command "redis-server"; then
        WARNINGS+=("Redis zaten kurulu - yeniden kurulum yapƒ±lacak")
    fi
    
    check_service "redis-server"
    check_port 6379
    
    # Disk alanƒ± kontrol√º
    echo -e "\nüíæ Disk Alanƒ±:"
    available_space=$(df / | awk 'NR==2 {print $4}')
    if [ "$available_space" -lt 100000 ]; then
        WARNINGS+=("D√º≈ü√ºk disk alanƒ±: ${available_space}KB")
    fi
    echo -e "${GREEN}‚úì${NC} Yeterli disk alanƒ± mevcut"
    
    # Paket g√ºncellemeleri sim√ºlasyonu
    echo -e "\nüì¶ Paket Durumu:"
    if apt list --upgradable 2>/dev/null | grep -q "redis"; then
        echo -e "${YELLOW}‚ö†${NC} Redis g√ºncellemeleri mevcut"
    fi
    
    # Yapƒ±lacak i≈ülemler
    echo -e "\nüéØ Yapƒ±lacak ƒ∞≈ülemler:"
    echo "  1. Paket listesi g√ºncellenecek"
    echo "  2. Redis-server paketi kurulacak"
    echo "  3. Redis servisi etkinle≈ütirilecek"
    echo "  4. Redis servisi ba≈ülatƒ±lacak"
}

simulate_docker_install() {
    echo -e "\n${BLUE}=== Docker Redis Kurulum Sim√ºlasyonu ===${NC}"
    
    echo -e "\nüìã Docker Kontrolleri:"
    check_command "docker" || ERRORS+=("Docker kurulu deƒüil")
    
    # Docker servis kontrol√º
    if ! systemctl is-active --quiet docker 2>/dev/null; then
        ERRORS+=("Docker servisi √ßalƒ±≈ümƒ±yor")
    else
        echo -e "${GREEN}‚úì${NC} Docker servisi aktif"
    fi
    
    # Port kontrol√º
    echo -e "\nüîç Port Kontrolleri:"
    check_port 6379
    
    # Mevcut konteyner kontrol√º
    echo -e "\nüê≥ Konteyner Durumu:"
    if docker ps -a --format "table {{.Names}}" | grep -q "redis"; then
        WARNINGS+=("'redis' isimli konteyner zaten mevcut")
    fi
    
    # Image kontrol√º
    echo -e "\nüñºÔ∏è Image Durumu:"
    if docker images | grep -q "redis"; then
        echo -e "${GREEN}‚úì${NC} Redis image zaten mevcut"
    else
        echo -e "${YELLOW}‚ö†${NC} Redis image indirilecek (~100MB)"
    fi
    
    echo -e "\nüéØ Yapƒ±lacak ƒ∞≈ülemler:"
    echo "  1. Redis image indirilecek (eƒüer yoksa)"
    echo "  2. Redis konteyneri olu≈üturulacak"
    echo "  3. Port 6379 y√∂nlendirilecek"
}

simulate_k8s_install() {
    echo -e "\n${BLUE}=== Kubernetes Redis Kurulum Sim√ºlasyonu ===${NC}"
    
    echo -e "\nüìã Kubernetes Kontrolleri:"
    check_command "kubectl" || ERRORS+=("kubectl kurulu deƒüil")
    
    # Cluster baƒülantƒ±sƒ± kontrol√º
    echo -e "\nüîó Cluster Baƒülantƒ±sƒ±:"
    if kubectl cluster-info >/dev/null 2>&1; then
        echo -e "${GREEN}‚úì${NC} Kubernetes cluster'a baƒülƒ±"
    else
        ERRORS+=("Kubernetes cluster'a baƒülanƒ±lamƒ±yor")
    fi
    
    # Manifest dosyasƒ± kontrol√º
    manifest_path="../examples/redis-deployment.yaml"
    echo -e "\nüìÑ Manifest Dosyasƒ±:"
    if [ -f "$manifest_path" ]; then
        echo -e "${GREEN}‚úì${NC} Manifest dosyasƒ± mevcut: $manifest_path"
    else
        ERRORS+=("Manifest dosyasƒ± bulunamadƒ±: $manifest_path")
    fi
    
    # Namespace kontrol√º
    echo -e "\nüè∑Ô∏è Namespace:"
    current_ns=$(kubectl config view --minify --output 'jsonpath={..namespace}')
    echo -e "${GREEN}‚úì${NC} Aktif namespace: ${current_ns:-default}"
    
    # Mevcut deployment kontrol√º
    echo -e "\nüöÄ Deployment Durumu:"
    if kubectl get deployment redis >/dev/null 2>&1; then
        WARNINGS+=("Redis deployment zaten mevcut")
    fi
    
    echo -e "\nüéØ Yapƒ±lacak ƒ∞≈ülemler:"
    echo "  1. Redis deployment olu≈üturulacak"
    echo "  2. Deployment durumu kontrol edilecek"
}

# Ana fonksiyon
main() {
    echo "Redis kurulumu analiz ediliyor..."
    
    case "$1" in
        "ubuntu")
            if $DRY_RUN; then
                simulate_ubuntu_install
            else
                sudo apt update
                sudo apt install -y redis-server
                sudo systemctl enable redis-server
                sudo systemctl start redis-server
            fi
            ;;
        "docker")
            if $DRY_RUN; then
                simulate_docker_install
            else
                docker pull redis:latest
                docker run -d --name redis -p 6379:6379 redis:latest
            fi
            ;;
        "k8s")
            if $DRY_RUN; then
                simulate_k8s_install
            else
                manifest_path="../examples/redis-deployment.yaml"
                kubectl apply -f $manifest_path
                kubectl rollout status deployment/redis
            fi
            ;;
        *)
            echo "Kullanƒ±m: $0 [--dry-run] {ubuntu|docker|k8s}"
            exit 1
            ;;
    esac
    
    # Dry-run sonu√ßlarƒ±
    if $DRY_RUN; then
        echo -e "\n${BLUE}=== DRY-RUN SONU√áLARI ===${NC}"
        
        if [ ${#ERRORS[@]} -gt 0 ]; then
            echo -e "\n${RED}‚ùå Kritik Sorunlar:${NC}"
            for error in "${ERRORS[@]}"; do
                echo -e "  ‚Ä¢ $error"
            done
        fi
        
        if [ ${#WARNINGS[@]} -gt 0 ]; then
            echo -e "\n${YELLOW}‚ö†Ô∏è Uyarƒ±lar:${NC}"
            for warning in "${WARNINGS[@]}"; do
                echo -e "  ‚Ä¢ $warning"
            done
        fi
        
        if [ ${#ERRORS[@]} -eq 0 ]; then
            echo -e "\n${GREEN}‚úÖ Kurulum i√ßin hazƒ±r!${NC}"
            echo "Ger√ßek kurulum i√ßin komutu tekrar √ßalƒ±≈ütƒ±rƒ±n:"
            echo "  $0 $1"
        else
            echo -e "\n${RED}‚ùå Kurulum yapƒ±lamaz. √ñnce sorunlarƒ± √ß√∂z√ºn.${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ Redis kurulumu tamamlandƒ±.${NC}"
    fi
}

main "$@"
